name: AutoPost & Analyze

"on":
  schedule:
    - cron: "0 * * * *"   # Hourly, internal gating decides real actions
  workflow_dispatch:
    inputs:
      mode:
        description: "run | analyze | both"
        required: false
        default: "run"
      dry_run:
        description: "true = do everything except post to X"
        required: false
        default: "false"
      force:
        description: "true = bypass time gating"
        required: false
        default: "false"
  repository_dispatch:
    # External agents can trigger via repository_dispatch events
    types: [autopost_run, autopost_analyze]

permissions:
  contents: write
  id-token: write
  attestations: write

concurrency:
  group: autopost
  cancel-in-progress: false

env:
  CLIP_DURATION_SEC: "20"
  TEASER_DURATION_SEC: "180"
  NUM_CLIPS: "3"
  SCENE_THRESHOLD: "0.4"

jobs:
  analyze:
    runs-on: ubuntu-latest
    name: Weekly analysis (best posting times)
    steps:
      - name: Decide if analysis should run
        id: gate
        run: |
          set -euo pipefail
          # Handle repository_dispatch events by mapping to existing variables
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            case "${{ github.event.action }}" in
              "autopost_analyze")
                REQ_MODE="analyze"
                FORCE="${{ github.event.client_payload.force || 'false' }}"
                ;;
              "autopost_run")
                REQ_MODE="run"
                FORCE="${{ github.event.client_payload.force || 'false' }}"
                ;;
              *)
                REQ_MODE="run"
                FORCE="false"
                ;;
            esac
          else
            # Handle workflow_dispatch and schedule events
            FORCE="${{ github.event.inputs.force || 'false' }}"
            REQ_MODE="${{ github.event.inputs.mode || 'run' }}"
          fi

          DOW=$(date -u +%u)   # 1=Mon
          # HH:MM (UTC)
          HM=$(date -u +%H:%M)
          SHOULD="false"
          if [ "$FORCE" = "true" ]; then SHOULD="true"; fi
          if [ "$REQ_MODE" = "analyze" ] || [ "$REQ_MODE" = "both" ]; then
            SHOULD="true"
          fi
          if [ "$DOW" = "1" ] && [ "$HM" = "03:00" ]; then SHOULD="true"; fi
          echo "should_run=$SHOULD" >> $GITHUB_OUTPUT
          echo "Computed should_run=$SHOULD (UTC now $(date -u))"
      - if: steps.gate.outputs.should_run == 'true'
        uses: actions/checkout@v4
      - if: steps.gate.outputs.should_run == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
      - if: steps.gate.outputs.should_run == 'true'
        name: Build (skip tests for speed)
        run: mvn -q -DskipTests package
      - if: steps.gate.outputs.should_run == 'true'
        name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ github.workspace }}/target/autopost.jar
      - if: steps.gate.outputs.should_run == 'true'
        name: Run analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RAW_FOLDER_ID: "unused"
          EDITS_FOLDER_ID: "unused"
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
        run: |
          set -euo pipefail
          java -jar target/autopost.jar analyze
      - if: steps.gate.outputs.should_run == 'true'
        name: Commit updated analysis artifacts
        run: |
          set -euo pipefail
          git config user.name "autopost-bot"
          git config user.email "autopost-bot@users.noreply.github.com"
          for f in best_slots.json analysis.md; do
            [ -f "$f" ] && git add "$f"
          done
          if git diff --cached --quiet; then
            echo "No analysis changes to commit."
          else
            git commit -m "chore: update best posting slots"
            git pull --rebase origin "${GITHUB_REF_NAME:-main}" || true
            git push
          fi
      - if: steps.gate.outputs.should_run == 'true'
        name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-artifacts
          path: |
            best_slots.json
            analysis.md
          if-no-files-found: ignore
      - name: Summary (analysis)
        if: always()
        run: |
          {
            echo "### Analysis Job"
            echo "* Ran: ${{ steps.gate.outputs.should_run }}"
            echo "* Status: ${{ job.status }}"
            echo "* Time (UTC): $(date -u)"
          } >> $GITHUB_STEP_SUMMARY

  autopost:
    runs-on: ubuntu-latest
    name: Daily AutoPost
    needs: [analyze]
    steps:
      - name: Decide if posting should run
        id: gate
        run: |
          set -euo pipefail
          # Handle repository_dispatch events by mapping to existing variables
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            case "${{ github.event.action }}" in
              "autopost_run")
                REQ_MODE="run"
                FORCE="${{ github.event.client_payload.force || 'false' }}"
                DRY="${{ github.event.client_payload.dry_run || 'false' }}"
                ;;
              "autopost_analyze")
                REQ_MODE="analyze"
                FORCE="${{ github.event.client_payload.force || 'false' }}"
                DRY="${{ github.event.client_payload.dry_run || 'false' }}"
                ;;
              *)
                REQ_MODE="run"
                FORCE="false"
                DRY="false"
                ;;
            esac
          else
            # Handle workflow_dispatch and schedule events
            FORCE="${{ github.event.inputs.force || 'false' }}"
            REQ_MODE="${{ github.event.inputs.mode || 'run' }}"
            DRY="${{ github.event.inputs.dry_run || 'false' }}"
          fi

          HM=$(date -u +%H:%M)
          TARGET="08:00" # 08:00 UTC â‰ˆ 09:00 London winter
          SHOULD="false"
          if [ "$FORCE" = "true" ]; then SHOULD="true"; fi
          if [ "$REQ_MODE" = "run" ] || [ "$REQ_MODE" = "both" ]; then
            if [ "$HM" = "$TARGET" ]; then SHOULD="true"; fi
          fi
          echo "should_run=$SHOULD" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY" >> $GITHUB_OUTPUT
          echo "Computed should_run=$SHOULD dry_run=$DRY (UTC now $(date -u))"
      - if: steps.gate.outputs.should_run == 'true'
        uses: actions/checkout@v4
      - if: steps.gate.outputs.should_run == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven
      - if: steps.gate.outputs.should_run == 'true'
        name: Install ffmpeg
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      - if: steps.gate.outputs.should_run == 'true'
        name: Build (skip tests)
        run: mvn -q -DskipTests package
      - if: steps.gate.outputs.should_run == 'true'
        name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ github.workspace }}/target/autopost.jar
      - if: steps.gate.outputs.should_run == 'true'
        name: Write service account file
        run: |
          printf '%s' "$GOOGLE_SERVICE_ACCOUNT_JSON" > sa.json
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
      - if: steps.gate.outputs.should_run == 'true'
        name: Run autopost
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/sa.json
          RAW_FOLDER_ID: ${{ secrets.RAW_FOLDER_ID || secrets.GOOGLE_RAW_FOLDER_ID }}
          EDITS_FOLDER_ID: ${{ secrets.EDITS_FOLDER_ID || secrets.GOOGLE_EDITS_FOLDER_ID }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
          CLIP_DURATION_SEC: ${{ env.CLIP_DURATION_SEC }}
          TEASER_DURATION_SEC: ${{ env.TEASER_DURATION_SEC }}
          NUM_CLIPS: ${{ env.NUM_CLIPS }}
          SCENE_THRESHOLD: ${{ env.SCENE_THRESHOLD }}
          DRY_RUN: ${{ steps.gate.outputs.dry_run }}
        run: |
          set -euo pipefail
          if [ "${DRY_RUN}" = "true" ]; then
            echo "DRY RUN: Application should avoid posting."
          fi
          java -jar target/autopost.jar run
      - if: steps.gate.outputs.should_run == 'true'
        name: Cleanup
        run: rm -f sa.json
      - name: Upload autopost artifacts
        if: steps.gate.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: autopost-output
          path: |
            best_slots.json
            analysis.md
          if-no-files-found: ignore
      - name: Summary (autopost)
        if: always()
        run: |
          {
            echo "### Autopost Job"
            echo "* Ran: ${{ steps.gate.outputs.should_run }}"
            echo "* Status: ${{ job.status }}"
            echo "* Dry run: ${{ steps.gate.outputs.dry_run }}"
            echo "* Time (UTC): $(date -u)"
          } >> $GITHUB_STEP_SUMMARY
