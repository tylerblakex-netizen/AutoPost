name: AI Triage to Project

on:
  issues:
    types: [opened, edited, reopened]
  pull_request:
    types: [opened, edited, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - id: prompt
        run: |
          TITLE="${{ github.event.issue.title || github.event.pull_request.title }}"
          BODY="${{ github.event.issue.body || github.event.pull_request.body }}"
          printf "%s" "$TITLE :: $BODY" | head -c 12000 > item.txt
      - id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          TEXT=$(jq -Rs '.' item.txt)
          JSON=$(jq -n --arg text "$TEXT" '{
            model:"gpt-5-thinking",
            messages:[
              {role:"system","content":"Classify GitHub items. Respond as JSON: {\"labels\":[],\"priority\":\"P1|P2|P3\",\"summary\":\"...\"}"},
              {role:"user","content":$text}
            ],
            temperature:0
          }')
          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON" | jq -r '.choices[0].message.content')
          echo "json=$RESP" >> $GITHUB_OUTPUT
      - id: parsed
        run: |
          echo '${{ steps.ai.outputs.json }}' | jq -r '.labels[]?' | paste -sd',' - | sed 's/^$/none/' > labels.txt
          echo "labels=$(cat labels.txt)" >> $GITHUB_OUTPUT
          echo "summary=$(echo '${{ steps.ai.outputs.json }}' | jq -r '.summary')" >> $GITHUB_OUTPUT
      - if: steps.parsed.outputs.labels != 'none'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.parsed.outputs.labels }}
      - uses: actions-ecosystem/action-create-comment@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number || github.event.pull_request.number }}
          body: |
            **AI Triage**      
            ${{ steps.parsed.outputs.summary }}
      - uses: actions/github-script@v7
        env:
          OWNER: ${{ github.repository_owner }}
          NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
          PROJECT_ID: ${{ vars.PROJECT_ID }}
        with:
          script: |
            const { NUMBER, PROJECT_ID } = process.env;
            if (!PROJECT_ID) { core.warning("No PROJECT_ID set; skipping project add."); return; }
            const isPR = !!context.payload.pull_request;
            const q = isPR
              ? `query($o:String!,$n:String!,$num:Int!){repository(owner:$o,name:$n){pullRequest(number:$num){id}}}`
              : `query($o:String!,$n:String!,$num:Int!){repository(owner:$o,name:$n){issue(number:$num){id}}}`;
            const res = await github.graphql(q, { o: context.repo.owner, n: context.repo.repo, num: Number(NUMBER) });
            const nodeId = (res.repository.pullRequest || res.repository.issue).id;
            await github.graphql(`mutation($p:ID!,$c:ID!){addProjectV2ItemById(input:{projectId:$p, contentId:$c}){item{id}}}`, { p: PROJECT_ID, c: nodeId });
