name: CI

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: CI-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java (Temurin 21) + Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Install FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Ensure gradlew is executable
        run: chmod +x ./gradlew

      - name: Build + Unit tests
        run: ./gradlew --no-daemon clean test

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            build/reports/tests/test
            build/test-results/test

  integration_smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      # compute once; use to gate steps
      RUN_INTEGRATION: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON && secrets.GDRIVE_PARENT_ID_RAW && secrets.GDRIVE_PARENT_ID_EDITS }}
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"
      GDRIVE_PARENT_ID_RAW: ${{ secrets.GDRIVE_PARENT_ID_RAW }}
      GDRIVE_PARENT_ID_EDITS: ${{ secrets.GDRIVE_PARENT_ID_EDITS }}
      AUTOMATION_DRY_RUN: 1
    steps:
      - name: Note if we’re skipping
        run: |
          if [ "${{ env.RUN_INTEGRATION }}" != "true" ]; then
            echo "Skipping integration: missing secrets"
          else
            echo "Running integration: all secrets present"
          fi

      - uses: actions/checkout@v4
        if: ${{ env.RUN_INTEGRRATION == 'true' || env.RUN_INTEGRATION == 'true' }}  # safety if you typo once

      - name: Set up Java (Temurin 21) + Gradle cache
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Install FFmpeg
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Generate synthetic video (2s)
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: >
          ffmpeg -f lavfi -i smptebars=s=1280x720:d=2
          -f lavfi -i sine=f=1000:duration=2
          -shortest -c:v libx264 -pix_fmt yuv420p -c:a aac /tmp/synth.mp4

      - name: Write service account JSON (secret → temp file)
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: |
          sa_file="$(mktemp /tmp/gdrive-sa.XXXXXX.json)"
          printf '%s' "${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}" > "$sa_file"
          echo "GDRIVE_SERVICE_ACCOUNT_FILE=$sa_file" >> $GITHUB_ENV

      - name: Ensure gradlew is executable
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: chmod +x ./gradlew

      - name: Run integration smoke
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: ./gradlew --no-daemon integrationTest || ./gradlew --no-daemon test

      - name: Upload smoke reports
        if: ${{ always() && env.RUN_INTEGRATION == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: integration-reports
          path: |
            build/reports/tests/integrationTest
            build/test-results/integrationTest
            build/reports/tests/test
            build/test-results/test

  release_on_tag:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build_and_test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java (Temurin 21) + Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Ensure gradlew is executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew --no-daemon build

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
