name: Setup AutoPost (one-shot)
on: { workflow_dispatch: {} }
permissions: { contents: write }

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Write project (and purge old helpers)
        shell: bash
        run: |
          set -euo pipefail

          # clean old helper files the user mentioned
          rm -f create-java.sh .github/workflows/scaffold.yml || true

          # fresh tree
          rm -rf src || true
          mkdir -p src/main/java/com/autopost src/main/resources .github/workflows

          # -------------------- .gitignore --------------------
          cat > .gitignore << 'EOF'
          target/
          .idea/
          .vscode/
          *.iml
          .classpath
          .project
          .settings/
          .DS_Store
          .env
          sa.json
          *.log
          EOF

          # -------------------- pom.xml --------------------
          cat > pom.xml << 'EOF'
          <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.autopost</groupId>
            <artifactId>autopost</artifactId>
            <version>1.1.0</version>
            <name>AutoPost</name>
            <properties>
              <maven.compiler.source>17</maven.compiler.source>
              <maven.compiler.target>17</maven.compiler.target>
              <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
              <dependency>
                <groupId>com.google.apis</groupId>
                <artifactId>google-api-services-drive</artifactId>
                <version>v3-rev20240522-2.0.0</version>
              </dependency>
              <dependency>
                <groupId>com.google.auth</groupId>
                <artifactId>google-auth-library-oauth2-http</artifactId>
                <version>1.23.0</version>
              </dependency>
              <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>4.12.0</version>
              </dependency>
              <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.17.1</version>
              </dependency>
              <dependency>
                <groupId>org.twitter4j</groupId>
                <artifactId>twitter4j-core</artifactId>
                <version>4.0.7</version>
              </dependency>
              <dependency>
                <groupId>org.threeten</groupId>
                <artifactId>threetenbp</artifactId>
                <version>1.6.8</version>
              </dependency>
            </dependencies>
            <build>
              <plugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-shade-plugin</artifactId>
                  <version>3.5.0</version>
                  <executions>
                    <execution>
                      <phase>package</phase>
                      <goals><goal>shade</goal></goals>
                      <configuration>
                        <transformers>
                          <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>com.autopost.App</mainClass>
                          </transformer>
                        </transformers>
                        <finalName>autopost</finalName>
                      </configuration>
                    </execution>
                  </executions>
                </plugin>
              </plugins>
            </build>
          </project>
          EOF

          # -------------------- README --------------------
          cat > README.md << 'EOF'
          # AutoPost (Java)
          Drive RAW → ffmpeg scene cut (**3×20s + 1×180s teaser**) → 1080p60 → OpenAI captions (≤3 hashtags, non-explicit) → post to X (OAuth1) or webhook → move to EDITS.
          Learns your **best posting hour per day** from your own tweets; runs hourly but only posts in that hour (Europe/London).
          EOF

          # -------------------- resources --------------------
          cat > src/main/resources/collabs.json << 'EOF'
          { "LiamKnox": "@liamknoxxx" }
          EOF

          # -------------------- Java sources --------------------
          cat > src/main/java/com/autopost/App.java << 'EOF'
          package com.autopost;
          public class App {
            public static void main(String[] args) throws Exception {
              if (args.length > 0 && args[0].equalsIgnoreCase("analyze")) new XAnalyzer().run();
              else new Runner().run();
            }
          }
          EOF

          cat > src/main/java/com/autopost/Config.java << 'EOF'
          package com.autopost;
          public record Config(
              String openaiKey,String openaiModel,String rawFolderId,String editsFolderId,
              String webhookUrl,String saPath,String saInlineJson,
              String twApiKey,String twApiSecret,String twAccessToken,String twAccessSecret
          ){
            public static Config loadFromEnv(){
              return new Config(
                req("OPENAI_API_KEY"),
                env("OPENAI_MODEL","gpt-4o-mini"),
                req("RAW_FOLDER_ID"),
                req("EDITS_FOLDER_ID"),
                env("WEBHOOK_URL",""),
                env("GOOGLE_APPLICATION_CREDENTIALS",""),
                env("GOOGLE_SERVICE_ACCOUNT_JSON",""),
                env("TWITTER_API_KEY",""),
                env("TWITTER_API_SECRET",""),
                env("TWITTER_ACCESS_TOKEN",""),
                env("TWITTER_ACCESS_SECRET","")
              );
            }
            static String env(String k,String d){ String v=System.getenv(k); return v==null||v.isBlank()?d:v; }
            static String req(String k){ String v=System.getenv(k); if(v==null||v.isBlank()) throw new RuntimeException(k+" is required"); return v; }
            public boolean hasInlineSA(){ return saInlineJson()!=null && !saInlineJson().isBlank(); }
            public boolean hasSAPath(){ return saPath()!=null && !saPath().isBlank(); }
          }
          EOF

          cat > src/main/java/com/autopost/DriveService.java << 'EOF'
          package com.autopost;

          import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
          import com.google.api.client.json.gson.GsonFactory;
          import com.google.api.services.drive.Drive;
          import com.google.api.services.drive.DriveScopes;
          import com.google.api.services.drive.model.File;
          import com.google.api.services.drive.model.FileList;
          import com.google.auth.http.HttpCredentialsAdapter;
          import com.google.auth.oauth2.GoogleCredentials;
          import com.google.auth.oauth2.ServiceAccountCredentials;

          import java.io.*;
          import java.nio.file.*;
          import java.util.*;

          public class DriveService {
            private final Drive drive;
            public DriveService(Config cfg) throws Exception {
              GoogleCredentials creds;
              if (cfg.hasInlineSA()) {
                creds = ServiceAccountCredentials.fromStream(new ByteArrayInputStream(cfg.saInlineJson().getBytes()))
                    .createScoped(Set.of(DriveScopes.DRIVE));
              } else if (cfg.hasSAPath()) {
                creds = ServiceAccountCredentials.fromStream(new FileInputStream(cfg.saPath()))
                    .createScoped(Set.of(DriveScopes.DRIVE));
              } else {
                throw new RuntimeException("Service account credentials not provided");
              }
              drive = new Drive.Builder(GoogleNetHttpTransport.newTrustedTransport(), GsonFactory.getDefaultInstance(), new HttpCredentialsAdapter(creds))
                  .setApplicationName("AutoPost").build();
            }

            public Map<String,Object> listOldestVideo(String folderId) throws IOException {
              String q = "'" + folderId + "' in parents and mimeType contains 'video/' and trashed=false";
              FileList list = drive.files().list().setQ(q).setFields("files(id,name,createdTime,parents,webViewLink)").setOrderBy("createdTime").setPageSize(10).execute();
              List<File> files = list.getFiles();
              if (files == null || files.isEmpty()) return null;
              File f = files.get(0);
              Map<String,Object> m = new LinkedHashMap<>();
              m.put("id", f.getId());
              m.put("name", f.getName());
              return m;
            }

            public String ensureAnyoneView(String fileId) throws IOException {
              try {
                var p = new com.google.api.services.drive.model.Permission();
                p.setType("anyone"); p.setRole("reader");
                drive.permissions().create(fileId, p).execute();
              } catch (IOException ignored) {}
              return drive.files().get(fileId).setFields("id,webViewLink").execute().getWebViewLink();
            }

            public void downloadFile(String fileId, Path dest) throws IOException {
              try (OutputStream os = Files.newOutputStream(dest)) {
                drive.files().get(fileId).executeMediaAndDownloadTo(os);
              }
            }

            public void moveTo(String fileId, String newParentId) throws IOException {
              File f = drive.files().get(fileId).setFields("parents").execute();
              String prev = String.join(",", f.getParents()==null? List.of(): f.getParents());
              drive.files().update(fileId, null).setAddParents(newParentId).setRemoveParents(prev).setFields("id,parents").execute();
            }

            public String uploadFile(Path file, String folderId, String name) throws IOException {
              var meta = new com.google.api.services.drive.model.File();
              meta.setName(name);
              meta.setParents(java.util.List.of(folderId));
              var media = new com.google.api.client.http.FileContent("video/mp4", file.toFile());
              return drive.files().create(meta, media).setFields("id").execute().getId();
            }
          }
          EOF

          cat > src/main/java/com/autopost/CaptionService.java << 'EOF'
          package com.autopost;

          import com.fasterxml.jackson.databind.*;
          import okhttp3.*;

          import java.util.*;
          import java.util.regex.*;

          public class CaptionService {
            public record Caption(String caption, List<String> hashtags) {}

            private final String apiKey, model;
            private static final ObjectMapper M = new ObjectMapper();
            private static final OkHttpClient HTTP = new OkHttpClient();

            private static final String SYSTEM = "You write short, algorithm-friendly social captions. Non-explicit, confident. Output strict JSON: {caption, hashtags} where hashtags is an array (<=3).";
            private static final String PROMPT = """
          Create a caption for a short teaser video.
          Rules:
          - ≤ 1 sentence + optional emoji.
          - Avoid explicit sexual language.
          - Up to 3 hashtags (return as array; no more).
          - Tone: bold, confident, high-energy, non-cringe.
          Context:
          - Filename/Title: %s
          - Collaborator: %s
          - Platform: X (but can be reused elsewhere)
          """;

            public CaptionService(Config cfg){ this.apiKey = cfg.openaiKey(); this.model = cfg.openaiModel(); }

            public Caption generate(String title, String collaborator) throws Exception {
              String user = PROMPT.formatted(title, collaborator==null? "none": collaborator);

              ObjectNode body = M.createObjectNode();
              body.put("model", model);
              ArrayNode msgs = body.putArray("messages");
              msgs.addObject().put("role","system").put("content", SYSTEM);
              msgs.addObject().put("role","user").put("content", user);
              body.put("temperature", 0.7);

              Request req = new Request.Builder()
                  .url("https://api.openai.com/v1/chat/completions")
                  .header("Authorization","Bearer "+apiKey)
                  .post(RequestBody.create(M.writeValueAsBytes(body), MediaType.parse("application/json")))
                  .build();

              try(Response resp = HTTP.newCall(req).execute()){
                if(!resp.isSuccessful()) throw new RuntimeException("OpenAI error: "+resp.code()+" "+resp.message());
                var root = M.readTree(resp.body().bytes());
                String text = root.at("/choices/0/message/content").asText().trim();
                var m = Pattern.compile("\\{[\\s\\S]*\\}").matcher(text);
                String json = m.find()? m.group(): text;
                var p = M.readTree(json);
                java.util.List<String> tags = new java.util.ArrayList<>();
                if(p.has("hashtags") && p.get("hashtags").isArray()){
                  for(JsonNode t: p.get("hashtags")){
                    if(tags.size()>=3) break;
                    tags.add(t.asText().replace("#","").trim());
                  }
                }
                return new Caption(p.get("caption").asText(), tags);
              }
            }
          }
          EOF

          cat > src/main/java/com/autopost/FilenameUtil.java << 'EOF'
          package com.autopost;

          import java.text.Normalizer;
          import java.time.LocalDate;
          import java.time.format.DateTimeFormatter;

          public class FilenameUtil {
            private static final DateTimeFormatter D = DateTimeFormatter.ofPattern("yyyyMMdd");

            public static String sanitizeBase(String s){
              String n = Normalizer.normalize(s, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]","");
              n = n.replaceAll("[^A-Za-z0-9._-]+","_").replaceAll("_+","_").replaceAll("(^_|_$)","");
              if(n.length()>60) n = n.substring(0,60);
              if(!n.toLowerCase().endsWith(".mp4")) n += ".mp4";
              return n;
            }

            public static String buildName(String collab, String type, int index){
              String date = LocalDate.now().format(D);
              String base = (collab==null||collab.isBlank()? "clip": collab) + "_" + type + "_" + String.format("%02d", index);
              return sanitizeBase(date + "_" + base + ".mp4");
            }
          }
          EOF

          cat > src/main/java/com/autopost/VideoProcessor.java << 'EOF'
          package com.autopost;

          import java.io.*;
          import java.nio.file.*;
          import java.util.*;
          import java.util.stream.Collectors;

          public class VideoProcessor {
            private final String ffmpeg = env("FFMPEG_PATH","ffmpeg");
            private final String ffprobe = env("FFPROBE_PATH","ffprobe");
            private final Path tmp = Paths.get(env("FFMPEG_TEMP_DIR", System.getProperty("java.io.tmpdir")));
            private final double scene = Double.parseDouble(env("SCENE_THRESHOLD","0.4"));
            private final int clip = Integer.parseInt(env("CLIP_DURATION_SEC","20"));
            private final int teaser = Integer.parseInt(env("TEASER_DURATION_SEC","180"));
            private final int clips = Integer.parseInt(env("NUM_CLIPS","3"));
            static String env(String k,String d){ String v=System.getenv(k); return v==null||v.isBlank()?d:v; }

            public List<Double> detectScenes(Path input) throws Exception{
              var cmd = List.of(
                ffprobe, "-show_frames", "-of", "compact=p=0", "-f", "lavfi",
                "movie=\""+ input.toAbsolutePath().toString().replace("\"","\\\"") +"\",select=gt(scene\\,"+scene+")"
              );
              var p = new ProcessBuilder(cmd).redirectErrorStream(true).start();
              List<String> out;
              try(var br = new BufferedReader(new InputStreamReader(p.getInputStream()))){
                out = br.lines().collect(Collectors.toList());
              }
              p.waitFor();
              List<Double> pts = new ArrayList<>();
              for(String line: out){
                int i = line.indexOf("pkt_pts_time=");
                if(i>=0){
                  int j = line.indexOf('|', i);
                  String v = (j>i? line.substring(i+13, j): line.substring(i+13));
                  try{ pts.add(Double.parseDouble(v)); }catch(Exception ignore){}
                }
              }
              if(pts.isEmpty()) pts = List.of(0.0,60.0,120.0,180.0,240.0);
              return pts;
            }

            public Path cut(Path in,double start,double dur,String name) throws Exception{
              Path out = tmp.resolve(name);
              var cmd = List.of(
                ffmpeg,"-ss",String.valueOf(start),"-i",in.toString(),"-t",String.valueOf(dur),
                "-c:v","libx264","-preset","fast","-crf","23","-c:a","aac","-b:a","192k",
                out.toString()
              );
              run(cmd); return out;
            }

            public Path to1080p60(Path in,String name) throws Exception{
              Path out = tmp.resolve(name);
              var cmd = List.of(
                ffmpeg,"-i",in.toString(),
                "-vf","scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2",
                "-r","60","-c:v","libx264","-preset","fast","-crf","23","-c:a","aac","-b:a","256k",
                out.toString()
              );
              run(cmd); return out;
            }

            public List<Path> makeClips(Path in) throws Exception{
              var t = detectScenes(in);
              var outs = new ArrayList<Path>();
              int n = Math.min(clips, Math.max(0, t.size()-1));
              for(int i=0;i<n;i++){
                double s = t.get(i);
                double d = Math.min(clip, (i+1<t.size()? t.get(i+1)-s: clip));
                outs.add(cut(in, s, d, "clip_"+(i+1)+".mp4"));
              }
              outs.add(cut(in, t.get(0), teaser, "teaser.mp4"));
              return outs;
            }

            private void run(List<String> cmd) throws Exception{
              var p = new ProcessBuilder(cmd).redirectErrorStream(true).start();
              try(var br = new BufferedReader(new InputStreamReader(p.getInputStream()))){
                while(br.readLine()!=null){}
              }
              int c = p.waitFor();
              if(c!=0) throw new RuntimeException("ffmpeg/ffprobe exited "+c);
            }
          }
          EOF

          cat > src/main/java/com/autopost/TwitterService.java << 'EOF'
          package com.autopost;

          import twitter4j.*;
          import twitter4j.auth.AccessToken;

          import java.nio.file.Path;

          public class TwitterService {
            private final Config cfg;
            public TwitterService(Config cfg){ this.cfg = cfg; }

            public boolean hasKeys(){
              return !(e(cfg.twApiKey())||e(cfg.twApiSecret())||e(cfg.twAccessToken())||e(cfg.twAccessSecret()));
            }
            private static boolean e(String s){ return s==null||s.isBlank(); }

            public String tweetVideo(String text, Path media) throws TwitterException {
              Twitter t = TwitterFactory.getSingleton();
              t.setOAuthConsumer(cfg.twApiKey(), cfg.twApiSecret());
              t.setOAuthAccessToken(new AccessToken(cfg.twAccessToken(), cfg.twAccessSecret()));
              UploadedMedia m = t.uploadMediaChunked(media.toFile());
              StatusUpdate up = new StatusUpdate(text);
              up.setMediaIds(m.getMediaId());
              Status s = t.updateStatus(up);
              return "https://x.com/"+s.getUser().getScreenName()+"/status/"+s.getId();
            }
          }
          EOF

          cat > src/main/java/com/autopost/WebhookPoster.java << 'EOF'
          package com.autopost;

          import java.net.http.*;
          import java.net.URI;
          import java.time.Duration;
          import com.fasterxml.jackson.databind.ObjectMapper;

          public class WebhookPoster {
            private final String url;
            private static final HttpClient HTTP = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(10)).build();
            private static final ObjectMapper M = new ObjectMapper();
            public WebhookPoster(Config cfg){ this.url = cfg.webhookUrl(); }
            public void post(Object payload) throws Exception{
              if(url==null||url.isBlank()) return;
              byte[] body = M.writeValueAsBytes(payload);
              var req = HttpRequest.newBuilder(URI.create(url)).header("Content-Type","application/json").POST(HttpRequest.BodyPublishers.ofByteArray(body)).build();
              var res = HTTP.send(req, HttpResponse.BodyHandlers.ofString());
              if(res.statusCode()>=300) throw new RuntimeException("Webhook failed: "+res.statusCode()+" "+res.body());
            }
          }
          EOF

          cat > src/main/java/com/autopost/Utils.java << 'EOF'
          package com.autopost;

          import com.fasterxml.jackson.databind.ObjectMapper;
          import java.io.InputStream;
          import java.util.*;

          public class Utils {
            private static final ObjectMapper M = new ObjectMapper();
            private static final Set<String> GENERIC = Set.of("teaser","clip","video");

            public static String parseCollabFromFilename(String name){
              String base = name.replaceAll("\\.[^.]*$", "");
              String[] parts = base.split("[-_]",2);
              String token = parts[0].trim();
              return token.isBlank() || GENERIC.contains(token.toLowerCase()) ? null : token;
            }

            public static String loadCollabHandle(String collab){
              if (collab==null) return null;
              try (InputStream is = Utils.class.getResourceAsStream("/collabs.json")){
                Map<?,?> map = M.readValue(is, Map.class);
                Object v = map.get(collab);
                return v==null ? null : v.toString();
              } catch (Exception e) { return null; }
            }

            public static String joinCaption(String caption, java.util.List<String> hashtags, String handle){
              String text = caption==null ? "" : caption.trim();
              if (handle != null && !handle.isBlank()) text = (text + " " + handle).trim();
              if (hashtags != null && !hashtags.isEmpty()) {
                StringBuilder sb = new StringBuilder(text).append("\n");
                int n=0;
                for (String h : hashtags) {
                  if (n++>=3) break;
                  if (h==null || h.isBlank()) continue;
                  sb.append('#').append(h.replace("#","").trim()).append(' ');
                }
                text = sb.toString().trim();
              }
              return text;
            }
          }
          EOF

          cat > src/main/java/com/autopost/XAnalyzer.java << 'EOF'
          package com.autopost;

          import twitter4j.*;
          import java.io.*;
          import java.time.*;
          import java.util.*;
          import com.fasterxml.jackson.databind.ObjectMapper;

          public class XAnalyzer {
            private static final ZoneId LONDON = ZoneId.of("Europe/London");
            private static final String[] DAYS = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};
            private static final ObjectMapper M = new ObjectMapper();

            public void run() throws Exception {
              Config cfg = Config.loadFromEnv();
              Twitter t = TwitterFactory.getSingleton();
              t.setOAuthConsumer(cfg.twApiKey(), cfg.twApiSecret());
              t.setOAuthAccessToken(new twitter4j.auth.AccessToken(cfg.twAccessToken(), cfg.twAccessSecret()));

              java.util.List<Status> tweets = new java.util.ArrayList<>();
              long maxId = -1L;
              for (int page=0; page<8; page++) {
                Paging p = new Paging(page+1, 200);
                if (maxId>0) p.setMaxId(maxId-1);
                var batch = t.getUserTimeline(t.getScreenName(), p);
                if (batch==null || batch.isEmpty()) break;
                tweets.addAll(batch);
                maxId = batch.get(batch.size()-1).getId();
              }

              Map<Integer, Map<Integer, double[]>> buckets = new HashMap<>();
              for(int d=0; d<7; d++){ buckets.put(d, new HashMap<>()); for(int h=0; h<24; h++){ buckets.get(d).put(h, new double[]{0,0}); } }

              for (Status s : tweets) {
                if (s.isRetweet()) continue;
                var z = s.getCreatedAt().toInstant().atZone(LONDON);
                int d = z.getDayOfWeek().getValue() - 1;
                int h = z.getHour();
                double eng = s.getFavoriteCount() + s.getRetweetCount();
                var cell = buckets.get(d).get(h);
                cell[0] += 1.0; cell[1] += eng;
              }

              java.util.List<Map<String,Object>> slots = new java.util.ArrayList<>();
              for(int d=0; d<7; d++){
                double bestScore=-1; int bestHour=9; double alpha=1, beta=1;
                for(int h=0; h<24; h++){
                  var cell = buckets.get(d).get(h);
                  double score = (cell[1]+alpha)/(cell[0]+beta);
                  if(score>bestScore){ bestScore=score; bestHour=h; }
                }
                Map<String,Object> slot = new LinkedHashMap<>();
                slot.put("day", DAYS[d]);
                slot.put("hour", bestHour);
                slot.put("score", Math.round(bestScore*1000)/1000.0);
                slot.put("samples", (int)buckets.get(d).get(bestHour)[0]);
                slots.add(slot);
              }

              Map<String,Object> out = new LinkedHashMap<>();
              out.put("timezone","Europe/London");
              out.put("updated_at", Instant.now().toString());
              out.put("slots", slots);

              try(FileOutputStream fos = new FileOutputStream("best_slots.json")){
                M.writerWithDefaultPrettyPrinter().writeValue(fos, out);
              }
              StringBuilder sb = new StringBuilder("# Best posting times (Europe/London)\n\n");
              for(var s : slots) sb.append(s.get("day")).append(" ").append(String.format("%02d:00",(int)s.get("hour"))).append("\n");
              try(FileOutputStream fos = new FileOutputStream("analysis.md")){
                fos.write(sb.toString().getBytes());
              }
            }
          }
          EOF

          cat > src/main/java/com/autopost/Runner.java << 'EOF'
          package com.autopost;

          import java.nio.file.*;
          import java.time.*;
          import java.util.*;
          import java.util.logging.Logger;

          public class Runner {
            private static final Logger log = Logger.getLogger("AutoPost");
            private static final ZoneId LONDON = ZoneId.of("Europe/London");
            private static final Map<String,Integer> DOW = Map.of("Mon",0,"Tue",1,"Wed",2,"Thu",3,"Fri",4,"Sat",5,"Sun",6);

            private boolean inBestSlot(){
              Path p = Paths.get("best_slots.json");
              if(!Files.exists(p)) return ZonedDateTime.now(LONDON).getHour()==9;
              try{
                var root = new com.fasterxml.jackson.databind.ObjectMapper().readTree(Files.readString(p));
                var now = ZonedDateTime.now(LONDON);
                int dow = now.getDayOfWeek().getValue()-1;
                int hour = now.getHour();
                for(var s: root.get("slots")) if(DOW.get(s.get("day").asText())==dow && s.get("hour").asInt()==hour) return true;
                return false;
              }catch(Exception e){ return true; }
            }

            public void run() throws Exception {
              if(!inBestSlot()){ log.info("Not in best posting slot now. Skipping."); return; }

              var cfg = Config.loadFromEnv();
              var drive = new DriveService(cfg);
              var webhook = new WebhookPoster(cfg);
              var captions = new CaptionService(cfg);
              var twitter = new TwitterService(cfg);
              var video = new VideoProcessor();

              var f = drive.listOldestVideo(cfg.rawFolderId());
              if(f==null){ log.info("No files in RAW. Exiting."); return; }
              String fileId=(String)f.get("id"), fileName=(String)f.get("name");

              String collab = Utils.parseCollabFromFilename(fileName);
              String handle = Utils.loadCollabHandle(collab);

              Path src = Files.createTempFile("autopost_src_", ".mp4");
              drive.downloadFile(fileId, src);

              var outs = video.makeClips(src);
              Path first = outs.get(0);
              Path clip1080 = video.to1080p60(first, "clip_post.mp4");

              int i=1;
              for(Path pth: outs){
                String type = pth.getFileName().toString().contains("teaser") ? "teaser" : "clip";
                String safe = FilenameUtil.buildName(collab, type, i++);
                drive.uploadFile(pth, cfg.editsFolderId(), safe);
                try{ Files.deleteIfExists(pth);}catch(Exception ignore){}
              }

              var cap = captions.generate(fileName, handle!=null? handle: collab);
              String text = Utils.joinCaption(cap.caption(), cap.hashtags(), handle);
              String web = drive.ensureAnyoneView(fileId);

              boolean posted=false;
              if(twitter.hasKeys()){
                try{
                  String url = twitter.tweetVideo(text, clip1080);
                  posted=true; log.info("Tweet posted: "+url);
                }catch(Exception e){
                  log.warning("X posting failed: "+e.getMessage());
                }
              }
              if(!posted && cfg.webhookUrl()!=null && !cfg.webhookUrl().isBlank()){
                var payload = new java.util.LinkedHashMap<String,Object>();
                payload.put("title", fileName);
                payload.put("drive_file_id", fileId);
                payload.put("drive_web_link", web);
                payload.put("caption", text);
                payload.put("hashtags", cap.hashtags());
                payload.put("picked_at", java.time.Instant.now().toString());
                webhook.post(payload);
              }

              drive.moveTo(fileId, cfg.editsFolderId());
              try{ Files.deleteIfExists(src);}catch(Exception ignore){}
              try{ Files.deleteIfExists(clip1080);}catch(Exception ignore){}
              log.info("Done.");
            }
          }
          EOF

          # -------------------- Workflows (real ones) --------------------
          cat > .github/workflows/analyze-times.yml << 'EOF'
          name: Learn best posting times
          on:
            schedule:
              - cron: "0 3 * * 1"   # Mondays 03:00 UTC
            workflow_dispatch:
          permissions:
            contents: write
          jobs:
            analyze:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-java@v4
                  with: { distribution: temurin, java-version: "17" }
                - name: Build
                  run: mvn -q -DskipTests package
                - name: Analyze
                  env:
                    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                    RAW_FOLDER_ID: "unused"
                    EDITS_FOLDER_ID: "unused"
                    TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
                    TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
                    TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
                    TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
                  run: java -jar target/autopost.jar analyze
                - name: Commit best_slots.json
                  run: |
                    if git diff --quiet; then echo "No changes.";
                    else git config user.name "autopost-bot"; git config user.email "autopost-bot@users.noreply.github.com";
                         git add best_slots.json analysis.md; git commit -m "chore: update best posting slots"; git push; fi
          EOF

          cat > .github/workflows/autopost-hourly.yml << 'EOF'
          name: AutoPost (hourly gated)
          on:
            schedule:
              - cron: "0 * * * *"   # every hour (UTC)
            workflow_dispatch:
          jobs:
            run:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - name: Install ffmpeg
                  run: sudo apt-get update && sudo apt-get install -y ffmpeg
                - uses: actions/setup-java@v4
                  with: { distribution: temurin, java-version: "17" }
                - name: Build
                  run: mvn -q -DskipTests package
                - name: Write service account file
                  run: echo "$GOOGLE_SERVICE_ACCOUNT_JSON" > sa.json
                  env:
                    GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
                - name: Run (gated)
                  env:
                    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                    GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/sa.json
                    RAW_FOLDER_ID: ${{ secrets.RAW_FOLDER_ID }}
                    EDITS_FOLDER_ID: ${{ secrets.EDITS_FOLDER_ID }}
                    WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
                    TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
                    TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
                    TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
                    TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
                    CLIP_DURATION_SEC: "20"
                    TEASER_DURATION_SEC: "180"
                    NUM_CLIPS: "3"
                    SCENE_THRESHOLD: "0.4"
                  run: java -jar target/autopost.jar run
          EOF

      - name: Commit & push
        run: |
          git config user.name "autopost-bot"
          git config user.email "autopost-bot@users.noreply.github.com"
          git add -A
          git commit -m "setup: one-shot scaffold; remove old helpers" || echo "no changes"
          git push
